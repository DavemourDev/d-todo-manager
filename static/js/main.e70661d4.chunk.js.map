{"version":3,"sources":["components/export/TodoFileExport.tsx","services/storage/index.ts","config/todo-actions.ts","helpers/date-helpers.ts","config/settings-actions.ts","helpers/patterns.ts","helpers/dictionary/languages/CatalanDictionary.ts","helpers/dictionary/languages/EnglishDictionary.ts","helpers/dictionary/languages/SpanishDictionary.ts","helpers/dictionary/index.ts","context/TodoContext.tsx","helpers/string-helpers.ts","config/counter-actions.ts","components/layout/toolbar/ToolbarElement.tsx","components/selectors/Counter.tsx","components/todo/TodoRow.tsx","helpers/file-utils.ts","components/export/formats/ExportCsv.tsx","components/export/formats/ExportJson.tsx","components/export/formats/ExportTxt.tsx","components/layout/toolbar/Toolbar.tsx","components/layout/toolbar/TodoActionsMenu.tsx","helpers/data-summary.ts","components/content/Dialog.tsx","components/import/TodoFileImport.tsx","components/todo/TodoManager.tsx","components/widgets/ZoneWidget.tsx","helpers/icon-library.ts","components/Sandbox.tsx","components/dialogs/CustomTodoListDialog.tsx","components/selectors/DateSelector.tsx","components/dialogs/DateTodoListDialog.tsx","components/settings/SettingsManager.tsx","components/dialogs/SettingsManagerDialog.tsx","components/layout/toolbar/MainMenu.tsx","App.tsx","index.tsx"],"names":["Formats","EMPTY_TODOS","todos","EMPTY_KEYS","keys","getCustomStorageKeys","JSON","parse","localStorage","getItem","stringify","storeTodosOnDateKey","key","storageKey","setItem","loadTodosFromDateKey","createCustomTodoList","push","addCustomStorageKey","customKeyExists","includes","ACTIONS","reducer","action","reduced","name","type","payload","id","Date","now","completed","priority","map","todo","filter","sort","a","b","localeCompare","Array","from","loadTodosFromCustomKey","data","dateToIsoString","date","toISOString","substring","settings","language","Object","create","ISO_DATE_PATTERN","greetings","goodMorning","goodAfternoon","goodEvening","goodNight","labels","addTodo","loadTodoList","createNewTodoList","interfaceLanguage","issues","invalidFormat","cannotReadFileContents","noRecognisedFile","noTodosOnList","terms","actions","all","ascendent","averagePriority","completionState","delete","deletion","descendent","download","exit","export","file","import","pending","show","toSort","todoList","toMark","toggle","menu","customTodoLists","dailyTodoLists","configureSettings","tooltips","alphaSort","prioritySort","showCompletedFirst","showPendingFirst","markAllAs","downloadTodosAs","selectTodoList","importTodosFrom","importTodosFromFile","importDailyTodos","toggleCompletionState","markAllAsCompleted","markAllAsPending","deleteCompletedTodos","deletePendingTodos","increasePriority","decreasePriority","deleteTodo","descriptions","languageSettings","languages","es","ca","en","CATALAN","ENGLISH","SPANISH","DICTIONARY_MAPPING","TodoContext","createContext","DEFAULT_KEY","DEFAULT_SETTINGS","navigator","slice","TodoContextProvider","children","useReducer","todoReducer","dispatch","useState","setKey","settingsReducer","settingsDispatcher","dictionary","setDictionary","useEffect","input","test","storeTodosOnCustomKey","Provider","value","todoListKey","capitalize","str","toUpperCase","sanitize","sanitizeHtml","trim","count","maxValue","minValue","ToolbarElement","handler","icon","title","disabled","className","onClick","Counter","increaseLabel","decreaseLabel","onChange","TodoRow","useContext","newPriority","getTodoFileHeaders","label","TodoFileExportCsv","headers","filename","generateDownloadLink","encodeURIComponent","TodoFileExportJson","href","TodoFileExportTxt","fileContent","header","join","forEach","values","dataToTxt","TodoFileExport","format","CSV","TEXT","Toolbar","collapsed","clickLabelHandler","TodoActionsMenu","onOpenFileModal","context","activeItem","setActiveItem","getPrioritySum","reduce","sum","Dialog","isOpen","onClose","TodoFileImport","onSelectFile","onLoadDataError","htmlFor","accept","ev","files","target","readyHandler","fr","FileReader","addEventListener","readAsText","readTextFile","this","result","toString","error","TodoManager","setName","fileModalActive","setFileModalActive","prioritySum","length","getAveragePriority","toFixed","nCompleted","t","getNumberOfCompletedTodos","colSpan","onSubmit","event","preventDefault","sanitizedName","maxLength","size","e","alert","ZoneWidget","setDate","setInterval","h","getHours","getGreeting","toLocaleString","library","add","brands","faCheckSquare","faCoffee","faSquare","faTrash","faTrashAlt","faMinusSquare","faPlusSquare","faSortAlphaUpAlt","faSortAlphaDownAlt","faSortNumericUpAlt","faSortNumericDownAlt","faCheckCircle","faCircle","faCalendarCheck","faCalendarTimes","faCalendar","faExchangeAlt","faEye","faEyeSlash","faFile","faList","faTools","Sandbox","CustomTodoListDialog","active","onCreateTodoList","onSelectTodoList","newKey","setNewKey","TodoListKey","index","DateSelector","valueAsDate","willValidate","min","max","DateTodoListDialog","onSelectDate","SettingsManager","selected","SettingsManagerDialog","MainMenu","dateSelectorActive","setDateSelectorActive","todoListSelectorActive","setTodoListSelectorActive","settingsActive","setSettingsActive","selectTodoListHandler","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e70661d4.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { TodoContext } from '../../context/TodoContext';\nimport { DICTIONARY_MAPPING } from '../../helpers/dictionary';\nimport { Todo } from \"../../interfaces/Todo\";\nimport { TodoFileExportCsv } from './formats/ExportCsv';\nimport { TodoFileExportJson } from './formats/ExportJson';\nimport { TodoFileExportTxt } from './formats/ExportTxt';\n\nexport enum Formats {\n  JSON, CSV, TEXT\n};\n\ntype TodoFileExportProps = {\n  title: string,\n  data: Todo[],\n  format: Formats\n};\n\nexport type TodoFileExportInterfaceProps = {\n  title: string,\n  data: Todo[]\n};\n\n/**\n * Provides a button for downloading data on CSV format\n */\nconst TodoFileExport = ({ title, data, format }: TodoFileExportProps) => {\n  \n  const context = useContext(TodoContext);\n  const settings = context.settings;\n  const dictionary = DICTIONARY_MAPPING(settings.language);\n\n\n  if (format === Formats.CSV) {\n    return <TodoFileExportCsv title={title} data={data} />;\n  } else if (format === Formats.JSON) {\n    return <TodoFileExportJson title={title} data={data}/>;\n  } else if (format === Formats.TEXT) {\n    return <TodoFileExportTxt title={title} data={data}/>;\n  } else {  \n    return <>{ dictionary.issues.invalidFormat}</>;\n  }\n\n};\n\n\nexport { TodoFileExport }","import { Settings } from \"http2\";\nimport { Todo } from \"../../interfaces/Todo\";\n\nconst DATE_TODO_LIST_STORAGE_KEY = '#date--';\nconst CUSTOM_LIST_STORAGE_KEY = '#user-defined--';\nconst CUSTOM_STORAGE_KEYS_KEY = '#keys';\nconst SETTINGS_STORAGE_KEY = '#settings';\n\nconst EMPTY_TODOS = { todos: [] };\nconst EMPTY_KEYS = { keys: [] };\n\nexport const getCustomStorageKeys = (): string[] => {\n  const loadedKeys = JSON.parse(localStorage.getItem(CUSTOM_STORAGE_KEYS_KEY ) || JSON.stringify(EMPTY_KEYS));\n  return loadedKeys.keys;\n};\n\nexport const storeTodosOnDateKey = (key: string, todos: Todo[]) => {\n  const storageKey = DATE_TODO_LIST_STORAGE_KEY + key;\n  localStorage.setItem(storageKey, JSON.stringify({ todos }));\n}\n\nexport const loadTodosFromDateKey = (key: string): Todo[] => {\n  const storageKey = DATE_TODO_LIST_STORAGE_KEY + key;\n  const loaded = JSON.parse(localStorage.getItem(storageKey) || JSON.stringify(EMPTY_TODOS));\n  return loaded.todos;\n}\n\nexport const saveTodoOnDateKey = (key: string, todo: Todo): void => {\n  const todos: Todo[] = loadTodosFromDateKey(key);\n  todos.push(todo);\n  storeTodosOnDateKey(key, todos);\n}\n\nconst addCustomStorageKey = (key: string) => {\n  const keys: string[] = getCustomStorageKeys() || [];\n  keys.push(key);\n  localStorage.setItem(CUSTOM_STORAGE_KEYS_KEY, JSON.stringify({ keys }));\n};\n\nconst createCustomTodoList = (key: string): Todo[] => {\n  const storageKey = CUSTOM_LIST_STORAGE_KEY + key;\n  addCustomStorageKey(key);\n  localStorage.setItem(storageKey, JSON.stringify(EMPTY_TODOS));\n  return [];\n}\n\nexport const loadTodosFromCustomKey = (key: string): Todo[] => {\n\n  // SI la lista que se intenta obtener no existe, se creará\n  if (!customKeyExists(key)) {\n    createCustomTodoList(key);\n  } \n  const storageKey = CUSTOM_LIST_STORAGE_KEY + key;\n  const loaded = JSON.parse(localStorage.getItem(storageKey) || JSON.stringify(EMPTY_TODOS));\n  return loaded.todos || [];\n}\n\nexport const customKeyExists = (key: string) => {\n  return getCustomStorageKeys().includes(key);\n}\n\nexport const storeTodosOnCustomKey = (key: string, todos: Todo[]) => {\n  const storageKey = CUSTOM_LIST_STORAGE_KEY + key;\n  \n  localStorage.setItem(storageKey, JSON.stringify({ todos }));\n}\n\nexport const storeSettings = (settings: Settings) => {\n  localStorage.setItem(SETTINGS_STORAGE_KEY, JSON.stringify(settings));\n}","import { Action } from \"../interfaces/Action\";\nimport { Todo } from \"../interfaces/Todo\";\nimport { loadTodosFromCustomKey, loadTodosFromDateKey } from \"../services/storage\";\n\nconst ACTIONS = {\n\n    ADD_TODO: 'add todo',\n    TOGGLE_TODO: 'toggle todo',\n    DELETE_TODO: 'delete todo',\n    SORT_ALPHA_ASC: 'sort alphabetically ascendent',\n    SORT_ALPHA_DESC: 'sort alphabetically descendent',\n    SORT_PRIORITY_ASC: 'Sort for priority ascendent',\n    SORT_PRIORITY_DESC: 'Sort for priority descendent',\n    SORT_COMPLETED_FIRST: 'Sort completed todos first',\n    SORT_PENDING_FIRST: 'Sort pending todos first',\n    GET_TODO_LIST_FROM_KEY_DATE: 'Gets todos from a given date list key',\n    GET_TODO_LIST_FROM_CUSTOM_KEY: 'Gets todos from a given custom list key',\n    SET_TODO_PRIORITY: 'Set todo priority',\n    MARK_ALL_AS_COMPLETED: 'Set all todos state to complete',\n    MARK_ALL_AS_PENDING: 'Set all todos state to pending',\n    DELETE_ALL_COMPLETED: 'Delete all completed todos',\n    DELETE_ALL_PENDING: 'Delete all pending todos',\n    TOGGLE_ALL: 'Toggle all todos completion state',\n    IMPORT_TODOS: 'Import todos from an external source' \n};\n\nconst newTodo = (name: string): Todo => {\n    return {\n        id: Date.now(),\n        name: name,\n        completed: false,\n        priority: 1\n    };\n};\n\nconst reducer = (todos: Todo[], action: Action): Todo[] => {\n    let reduced;\n    switch (action.type) {\n        case ACTIONS.ADD_TODO:\n            return [ ...todos, newTodo(action.payload.name) ];\n        case ACTIONS.TOGGLE_TODO:\n            return todos.map(todo => {\n                if (todo.id === action.payload.id) {\n                    return { ...todo, completed: !todo.completed}\n                }\n                return todo;\n            });\n        case ACTIONS.DELETE_TODO:\n            return todos.filter(todo => todo.id !== action.payload.id);\n        case ACTIONS.SORT_ALPHA_ASC:\n            reduced = todos.sort((a, b) => a.name.localeCompare(b.name));\n            return Array.from(reduced);\n        case ACTIONS.SORT_ALPHA_DESC:\n            reduced = todos.sort((a, b) => b.name.localeCompare(a.name));\n            return Array.from(reduced);\n        case ACTIONS.SORT_PRIORITY_ASC:\n            reduced = todos.sort((a, b) => a.priority - b.priority);\n            return Array.from(reduced);\n        case ACTIONS.SORT_PRIORITY_DESC:\n            reduced = todos.sort((a, b) => b.priority - a.priority);\n            return Array.from(reduced);\n        case ACTIONS.SORT_COMPLETED_FIRST:\n            reduced = todos.sort((a, b) => (b.completed ? 1 : 0) - (a.completed ? 1 : 0));\n            return Array.from(reduced);\n        case ACTIONS.SORT_PENDING_FIRST:\n            reduced = todos.sort((a, b) => (a.completed ? 1 : 0) - (b.completed ? 1 : 0));\n            return Array.from(reduced);\n            case ACTIONS.GET_TODO_LIST_FROM_KEY_DATE:\n            return loadTodosFromDateKey(action.payload.key);\n        case ACTIONS.GET_TODO_LIST_FROM_CUSTOM_KEY:\n            return loadTodosFromCustomKey(action.payload.key);\n        case ACTIONS.SET_TODO_PRIORITY:\n            return todos.map(todo => { \n                if (todo.id === action.payload.id) { \n                    todo.priority = action.payload.priority;\n                }\n                return todo;\n            });\n        case ACTIONS.MARK_ALL_AS_COMPLETED:\n            return todos.map(todo => {\n                todo.completed = true;\n                return todo;\n            });\n        case ACTIONS.MARK_ALL_AS_PENDING:\n            return todos.map(todo => {\n                todo.completed = false;\n                return todo;\n            });\n        case ACTIONS.TOGGLE_ALL:\n            return todos.map(todo => {\n                todo.completed = !todo.completed;\n                return todo;\n            });\n        case ACTIONS.DELETE_ALL_COMPLETED:\n            return todos.filter(todo => !todo.completed);\n        case ACTIONS.DELETE_ALL_PENDING:\n            return todos.filter(todo => todo.completed);\n        case ACTIONS.IMPORT_TODOS:\n            return [...action.payload.data];\n        default: \n            return todos; \n    }\n};\n\nexport { ACTIONS, reducer }","const LOCALE = \"es-ES\";\n\nexport const dateToLocaleString = (date: Date): string => {\n\n  return date.toLocaleDateString(LOCALE);\n\n};\n\nexport const dateToIsoString = (date?: Date) => {\n  return date != null ? date.toISOString().substring(0, 10) : '';\n};","import { Action } from \"../interfaces/Action\";\nimport { Settings } from \"../interfaces/Settings\";\n\nexport const ACTIONS = {\n  SET_LANGUAGE: 'set application language'\n};\n\nexport const reducer = (settings: Settings, action: Action): Settings => { \n  switch (action.type) {\n    case ACTIONS.SET_LANGUAGE:\n      settings.language = action.payload.language;\n      return Object.create(settings);\n    default:\n      return settings;\n  }\n\n}\n","const ISO_DATE_PATTERN = /^\\d{4}-\\d{2}-\\d{2}$/;\n\nexport const checkISODate = (input: string): boolean => {\n  const isIsoDate = ISO_DATE_PATTERN.test(input); \n  return isIsoDate;\n}","import { IDictionary, Greetings, Issues, Labels, Menu, Terms, Tooltips, Descriptions, Languages } from \"../IDictionary\";\n\nconst greetings: Greetings = {\n  goodMorning: \"Bon dia!\",\n  goodAfternoon: \"Bona tarda!\",\n  goodEvening: \"Bon vespre!\",\n  goodNight: \"Bona nit!\"\n};\n\nconst labels: Labels = {\n  addTodo: \"Afegir tasca\",\n  loadTodoList: \"Carregar llista de tasques\",\n  createNewTodoList: \"Crear llista de tasques\",\n  interfaceLanguage: \"Idioma de la interfície\"\n};\n\nconst issues: Issues = {\n  invalidFormat: \"Format no vàlid\",\n  cannotReadFileContents: \"No s'han pogut llegir els continguts del fitxer\",\n  noRecognisedFile: \"Fitxer no reconegut\",\n  noTodosOnList: \"No hi ha tasques a la llista\"\n}; \n\nconst terms: Terms = {\n  actions: \"accions\",\n  all: \"tot\",\n  ascendent: 'ascendent',\n  averagePriority: 'prioritat mitjana',\n  completed: 'completades',\n  completionState: 'completada?',\n  create: 'crear',\n  date: 'data',\n  delete: 'esborrar',\n  deletion: 'Del·leció',\n  descendent: 'descendent',\n  download: 'descarregar',\n  exit: 'sortir',\n  export: 'exportar',\n  file: 'fitxer',\n  id: 'ID',\n  import: 'importar',\n  pending: 'pendents',\n  priority: 'prioritat',\n  settings: 'configuració',\n  sort: 'ordre',\n  show: 'mostrar',\n  toSort: 'ordenar',\n  todo: 'tasca',\n  todoList: 'llista de tasques',\n  todos: 'tasques',\n  toMark: 'marcar',\n  toggle: 'invertir',\n  language: 'idioma'\n};\n\nconst menu: Menu = {\n  customTodoLists: \"Llista de tasques personalitzades\",\n  dailyTodoLists: \"Llista de tasques diàries\",\n  configureSettings: \"Configuració de l'aplicació\"\n}\n\nconst tooltips: Tooltips = {\n  alphaSort: `${terms.toSort} alfabèticament`,\n  prioritySort: `${terms.toSort} per prioritat`,\n  showCompletedFirst: `${terms.show} ${terms.completed} primer`,\n  showPendingFirst: `${terms.show} ${terms.pending} primer`,\n  markAllAs: `${terms.toMark} ${terms.all} com a`,\n\n  downloadTodosAs: `${terms.download} ${terms.todos} com a`,\n  selectTodoList: `Sel·lecciona una ${terms.todoList}`,\n  importTodosFrom: `Importar ${terms.todos} des de `,\n  importTodosFromFile: `Importar ${terms.todos} des d'un ${terms.file}`,\n  importDailyTodos: `Importar ${terms.todos} diàries`,\n  toggleCompletionState: `${terms.toggle} estat de compleció`,\n  markAllAsCompleted: `${terms.toMark} ${terms.all} com a ${ terms.completed }`,\n  markAllAsPending: `${terms.toMark} ${terms.all} com a ${terms.pending}`,\n  deleteCompletedTodos: `${terms.delete} ${terms.completed}`,\n  deletePendingTodos: `${terms.delete} ${terms.pending}`,\n  increasePriority: `Augmentar ${terms.priority}`,\n  decreasePriority: `Reduïr ${terms.priority}`,\n  deleteTodo: `${terms.delete} ${terms.todo}`,\n}\n\nconst descriptions: Descriptions = {\n  importTodosFromFile: \"Selecciona el fitxer del qual vols carregar les tasques. Tingues en compte que les tasques actuals a la llista seran substituïdes per les tasques carregades.\",\n  languageSettings: \"NOTA: La configuració d'idioma s'aplica principalment a la interfície gràfica de l'aplicació, i no modificará ni traduirà de cap manera la informació de les teves tasques\",\n  dailyTodoLists: \"Escull una data per a accedir a les seves tasques.\",\n};\n\nconst languages: Languages = {\n  es: 'Castellà',\n  ca: 'Català',\n  en: 'Anglés',\n} \n\nexport class CatalanDictionary implements IDictionary {\n  greetings: Greetings = greetings;\n  labels: Labels = labels;\n  issues: Issues = issues;\n  terms: Terms = terms;\n  menu: Menu = menu;\n  tooltips: Tooltips = tooltips;\n  descriptions: Descriptions = descriptions;\n  languages: Languages = languages;\n}\n\nexport const CATALAN = new CatalanDictionary();","import { Descriptions, Greetings, IDictionary, Issues, Labels, Languages, Menu, Terms, Tooltips } from \"../IDictionary\";\n\nconst greetings: Greetings = {\n  goodMorning: \"Good morning!\",\n  goodAfternoon: \"Good afternoon!\",\n  goodEvening: \"Good evening!\",\n  goodNight: \"Good night!\"\n};\n\nconst labels: Labels = {\n  addTodo: \"Add TODO\",\n  loadTodoList: \"Load TODO list\",\n  createNewTodoList: \"Create TODO list\",\n  interfaceLanguage: \"GUI language\"\n};\n\nconst issues: Issues = {\n  invalidFormat: \"Invalid format\",\n  cannotReadFileContents: \"Cannot read file contents\",\n  noRecognisedFile: \"Non recognised file\",\n  noTodosOnList: \"TODO list is empty\"\n}; \n\nconst terms: Terms = {\n  actions: \"actions\",\n  all: \"all\",\n  ascendent: 'ascendent',\n  averagePriority: 'average priority',\n  completed: 'completed',\n  completionState: 'completed?',\n  create: 'create',\n  date: 'date',\n  delete: 'delete',\n  deletion: 'Deletion',\n  descendent: 'descendent',\n  download: 'download',\n  exit: 'exit',\n  export: 'export',\n  file: 'file',\n  id: 'ID',\n  import: 'import',\n  pending: 'pending',\n  priority: 'priority',\n  settings: 'settings',\n  sort: 'order',\n  show: 'show',\n  toSort: 'order',\n  todo: 'TODO',\n  todoList: 'TODO list',\n  todos: 'TODOs',\n  toMark: 'mark',\n  toggle: 'toggle',\n  language: 'language'\n};\n\nconst menu: Menu = {\n  customTodoLists: \"Custom TODO lists\",\n  dailyTodoLists: \"Daily TODO lists\",\n  configureSettings: \"Application settings\"\n}\n\nconst tooltips: Tooltips = {\n  alphaSort: `${terms.toSort} alphabetically`,\n  prioritySort: `${terms.toSort} by priority`,\n  showCompletedFirst: `${terms.show} ${terms.completed} first`,\n  showPendingFirst: `${terms.show} ${terms.pending} first`,\n  markAllAs: `${terms.toMark} ${terms.all} as`,\n\n  downloadTodosAs: `${terms.download} ${terms.todos} as`,\n  selectTodoList: `select a ${terms.todoList}`,\n  importTodosFrom: `${terms.import} ${terms.todos} from`,\n  importTodosFromFile: `${terms.import} ${terms.todos} from ${terms.file}`,\n  importDailyTodos: `${terms.import} daily ${terms.todos}`,\n  toggleCompletionState: `${terms.toggle} completion state`,\n  markAllAsCompleted: `${terms.toMark} ${terms.all} as ${ terms.completed }`,\n  markAllAsPending: `${terms.toMark} ${terms.all} as ${terms.pending}`,\n  deleteCompletedTodos: `${terms.delete} ${terms.completed}`,\n  deletePendingTodos: `${terms.delete} ${terms.pending}`,\n  increasePriority: `Increase ${terms.priority}`,\n  decreasePriority: `Decrease ${terms.priority}`,\n  deleteTodo: `${terms.delete} ${terms.todo}`\n\n}\n\nconst descriptions: Descriptions = {\n  importTodosFromFile: \"Select file from where to load TODOs. Current TODO list will be replaced by TODO list in file.\",\n  languageSettings: \"NOTE: Language settings applies mainly to application GUI, and it doesn't modify nor translate in any form TODOs data\",\n  dailyTodoLists: \"Choose a date for accessing its TODOs.\",\n};\n\n\nconst languages: Languages = {\n  es: 'Spanish',\n  ca: 'Catalan',\n  en: 'English',\n} \n\nexport class EnglishDictionary implements IDictionary {\n  greetings: Greetings = greetings;\n  labels: Labels = labels;\n  issues: Issues = issues;\n  terms: Terms = terms;\n  menu: Menu = menu;\n  tooltips: Tooltips = tooltips;\n  descriptions: Descriptions = descriptions;\n  languages: Languages = languages;\n}\n\nexport const ENGLISH = new EnglishDictionary();","import { Descriptions, Greetings, IDictionary, Issues, Labels, Languages, Menu, Terms, Tooltips } from \"../IDictionary\";\n\nconst greetings: Greetings = {\n  goodMorning: \"¡Buenos días!\",\n  goodAfternoon: \"¡Buenas tardes!\",\n  goodEvening: \"¡Buenas noches!\",\n  goodNight: \"¡Buenas noches!\"\n};\n\nconst labels: Labels = {\n  addTodo: \"Añadir tarea\",\n  loadTodoList: \"Cargar lista de tareas\",\n  createNewTodoList: \"Crear lista de tareas\",\n  interfaceLanguage: \"Idioma de la interfaz\"\n};\n\nconst issues: Issues = {\n  invalidFormat: \"Formato no válido\",\n  cannotReadFileContents: \"No se han podido leer los contenidos del fichero\",\n  noRecognisedFile: \"Fichero no reconocido\",\n  noTodosOnList: \"No hay tareas en la lista\"\n}; \n\nconst terms: Terms = {\n  actions: \"Acciones\",\n  all: \"Todo\",\n  ascendent: 'ascendente',\n  averagePriority: 'prioridad media',\n  completed: 'completadas',\n  completionState: 'completada?',\n  create: 'crear',\n  date: 'fecha',\n  delete: 'borrar',\n  deletion: 'borrado',\n  descendent: 'descendente',\n  download: 'descargar',\n  exit: 'salir',\n  export: 'exportar',\n  file: 'fichero',\n  id: 'ID',\n  import: 'importar',\n  pending: 'pendientes',\n  priority: 'prioridad',\n  settings: 'configuración',\n  sort: 'orden',\n  show: 'mostrar',\n  toSort: 'ordenar',\n  todo: 'tarea',\n  todoList: 'lista de tareas',\n  todos: 'tareas',\n  toMark: 'marcar',\n  toggle: 'invertir',\n  language: 'idioma'\n};\n\n\nconst menu: Menu = {\n  customTodoLists: \"Listas de tareas personalizadas\",\n  dailyTodoLists: \"Listas de tareas diarias\",\n  configureSettings: \"Configuración de la aplicación\"\n}\n\nconst tooltips: Tooltips = {\n  alphaSort: `${terms.toSort} alfabéticamente`,\n  prioritySort: `${terms.toSort} por prioridad`,\n  showCompletedFirst: `${terms.show} ${terms.completed} primero`,\n  showPendingFirst: `${terms.show} ${terms.pending} primero`,\n  markAllAs: `${terms.toMark} todas como`,\n\n  downloadTodosAs: `${terms.download} ${terms.todos} como`,\n  selectTodoList: `Selecciona una ${terms.todoList}`,\n  importTodosFrom: `${terms.import} ${terms.todos} desde `,\n  importTodosFromFile: `${terms.import} ${terms.todos} desde ${terms.file}`,\n  importDailyTodos: `${terms.import} ${terms.todos} diarias`,\n  toggleCompletionState: `${terms.toggle} estado de compleción`,\n  markAllAsCompleted: `${terms.toMark} ${terms.all} como ${ terms.completed }`,\n  markAllAsPending: `${terms.toMark} ${terms.all} como ${terms.pending}`,\n  deleteCompletedTodos: `${terms.delete} ${terms.completed}`,\n  deletePendingTodos: `${terms.delete} ${terms.pending}`,\n  increasePriority: `Aumentar ${terms.priority}`,\n  decreasePriority: `Reducir ${terms.priority}`,\n  deleteTodo: `${terms.delete} ${terms.todo}`\n}\n\nconst descriptions: Descriptions = {\n  importTodosFromFile: \"Seleccione el fichero del cual desea cargar tareas. Tener en cuenta que las tareas de la lista actual serán reemplazadas por las tareas cargadas del fichero.\",\n  languageSettings: \"NOTA: La configuración de idioma se aplica principalmente a la interfaz gráfica de la aplicación, y no modificará ni traducirá en absoluto la información de tus tareas\",\n  dailyTodoLists: \"Escoge una fecha para acceder a sus tareas.\",\n};\n\nconst languages: Languages = {\n  es: 'Castellano',\n  ca: 'Catalán',\n  en: 'Inglés',\n} \n\nexport class SpanishDictionary implements IDictionary {\n  greetings: Greetings = greetings;\n  labels: Labels = labels;\n  issues: Issues = issues;\n  terms: Terms = terms;\n  menu: Menu = menu;\n  tooltips: Tooltips = tooltips;\n  descriptions: Descriptions = descriptions;\n  languages: Languages = languages;\n}\n\nexport const SPANISH = new SpanishDictionary();","import { IDictionary } from \"./IDictionary\";\nimport { CATALAN } from \"./languages/CatalanDictionary\";\nimport { ENGLISH } from \"./languages/EnglishDictionary\";\nimport { SPANISH } from \"./languages/SpanishDictionary\";\n\nexport type Language = 'es' | 'ca' | 'en'; \n\nexport const DICTIONARY_MAPPING = (language: Language): IDictionary => {\n  switch (language) {\n    case 'es':\n      return SPANISH;\n    case 'ca':\n      return CATALAN;\n    case 'en':\n      return ENGLISH;\n    default:\n      return ENGLISH;\n  }\n  \n}","import React, { createContext, ReactNode, ReactNodeArray, useEffect, useReducer, useState } from \"react\";\nimport { reducer as todoReducer } from \"../config/todo-actions\";\nimport { dateToIsoString } from \"../helpers/date-helpers\";\nimport { Settings } from \"../interfaces/Settings\";\nimport { reducer as settingsReducer } from '../config/settings-actions';\nimport { checkISODate } from \"../helpers/patterns\";\nimport { storeTodosOnDateKey, storeTodosOnCustomKey } from \"../services/storage/index\";\nimport { DICTIONARY_MAPPING, Language } from \"../helpers/dictionary\";\n\nexport const TodoContext: React.Context<any> = createContext(null);\n\ntype TodoContextProviderProps = {\n  children: ReactNode | ReactNodeArray,\n};\n\nconst DEFAULT_KEY = dateToIsoString(new Date());\n\nconst DEFAULT_SETTINGS: Settings = {\n  language: navigator.language.slice(0, 2) as Language\n};\n\nexport const TodoContextProvider = ({ children }: TodoContextProviderProps) => {\n\n  const [todos, dispatch] = useReducer(todoReducer, []);\n  const [key, setKey] = useState(DEFAULT_KEY);\n  const [settings, settingsDispatcher] = useReducer(settingsReducer, DEFAULT_SETTINGS);\n  const [dictionary, setDictionary] = useState(DICTIONARY_MAPPING(settings.language));\n\n  const storeTodos = (): void => {\n      \n    if (key != null) {\n      if (checkISODate(key)) {\n        storeTodosOnDateKey(key, todos);\n      } else {\n        storeTodosOnCustomKey(key, todos);\n      }\n    }\n  };\n  \n  const refreshSettings = (): void => {\n    setDictionary(DICTIONARY_MAPPING(settings.language));\n  }\n\n  useEffect(storeTodos, [todos])\n  useEffect(refreshSettings, [settings]);\n\n  return (\n    <TodoContext.Provider value={{ todos, todoListKey: key, dispatch, settings, settingsDispatcher, setKey, dictionary }}>\n      { children }\n    </TodoContext.Provider>\n  );\n\n\n}","import sanitizeHtml from 'sanitize-html';\n\nexport const capitalize = (str: string): string => {\n  const capitalizedStr = str.slice(0, 1).toUpperCase() + str.slice(1);\n  return capitalizedStr;\n}\n\nexport const sanitize = (str: string): string => {\n  return sanitizeHtml(str.trim());\n}","import { Action } from \"../interfaces/Action\";\n\nconst ACTIONS = {\n    INCREMENT: 'increment',\n    DECREMENT: 'decrement'\n}\n\nconst reducer = (count: number, action: Action): number => {\n    switch (action.type) {\n      case ACTIONS.INCREMENT:\n        const increment = (action.payload.maxValue == null || action.payload.maxValue > count) ? 1 : 0;\n        return count + increment;\n      case ACTIONS.DECREMENT:\n        const decrement = (action.payload.minValue == null || action.payload.minValue < count) ? 1 : 0;\n        return count - decrement ;\n      default:\n        return count;\n    }\n};\n  \nexport { ACTIONS, reducer }","import { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { capitalize } from '../../../helpers/string-helpers';\n\n\ntype ToolbarElementProps = {\n  handler: () => void,\n  title: string,\n  icon?: IconProp\n  disabled?: boolean\n};\n\n\nexport const ToolbarElement = ({ handler, icon, title, disabled }: ToolbarElementProps) => (\n  <button\n    className={`toolbar-element ${icon && \"icon\"}`}\n    onClick={() => handler()}\n    title={ capitalize(title) }\n    disabled={disabled}\n  >\n    {icon ? <FontAwesomeIcon icon={icon} /> : <>{title}</>}\n  </button>\n);\n","import React, { useEffect, useReducer } from 'react';\n\nimport { ACTIONS, reducer } from '../../config/counter-actions'\nimport { ToolbarElement } from \"../layout/toolbar/ToolbarElement\";\n\ntype CounterProps = {\n    value: number,\n    minValue?: number,\n    maxValue?: number,\n    increaseLabel?: string,\n    decreaseLabel?: string,\n    onChange: (newValue: number) => void,\n};\n\nconst Counter = ({ value, minValue, maxValue, increaseLabel = '+', decreaseLabel = '-', onChange }: CounterProps) => {\n\n    const [ count, dispatch ] = useReducer(reducer, value );\n\n\n    const increment = (): void => {\n        const payload: {[key: string]: any} = {};\n        if (maxValue != null) {\n            payload.maxValue = maxValue;\n        }\n        dispatch({ type: ACTIONS.INCREMENT, payload });\n    };\n    \n    const decrement = (): void => {\n        const payload: {[key: string]: any} = {};\n        if (minValue != null) {\n            payload.minValue = minValue;\n        }\n        dispatch({ type: ACTIONS.DECREMENT, payload });\n    };\n\n    const changeValueHandler = () => {\n        onChange(count);\n    }\n\n    useEffect(changeValueHandler, [count])\n\n    return (\n        <div className=\"counter-box\">\n            <div className=\"toolbar-item-container\">\n                <ToolbarElement\n                    title={ decreaseLabel }\n                    icon=\"minus-square\"\n                    handler={ decrement }\n                    disabled={ minValue == null ? false : count <= minValue }\n                />\n                <div className=\"counter\">{count}</div>\n                <ToolbarElement\n                    title={ increaseLabel }\n                    icon=\"plus-square\"\n                    handler={ increment }\n                    disabled={ maxValue == null ? false : count >= maxValue }\n                />\n            </div>\n        </div>\n    )\n}\n\nexport { Counter };","/* eslint-disable jsx-a11y/accessible-emoji */\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { Reducer, ReducerAction, useContext } from 'react';\nimport { ACTIONS } from '../../config/todo-actions';\nimport { TodoContext } from '../../context/TodoContext';\nimport { IDictionary } from '../../helpers/dictionary/IDictionary';\nimport { capitalize } from '../../helpers/string-helpers';\nimport { Action } from '../../interfaces/Action';\nimport { Todo } from '../../interfaces/Todo';\nimport { Counter } from '../selectors/Counter';\n\n\ntype TodoRowProps = {\n    todo: Todo,\n    dispatch: React.Dispatch<ReducerAction<Reducer<Todo[], Action>>>\n}\n\nconst MIN_PRIORITY = 1;\nconst MAX_PRIORITY = 5;\n\nconst TodoRow = ({ todo, dispatch }: TodoRowProps) => {\n    \n    const context = useContext(TodoContext)\n    const dictionary: IDictionary = context.dictionary;\n\n    const handleToggleTodo = (): void => {\n        dispatch({ \n            type: ACTIONS.TOGGLE_TODO,\n            payload: {\n                id: todo.id\n            } \n        }); \n    }\n\n    const handlePriorityChange = (newPriority: number): void => {\n        dispatch({ \n            type: ACTIONS.SET_TODO_PRIORITY,\n            payload: {\n                id: todo.id,\n                priority: newPriority\n            } \n        }); \n    }\n\n    const handleDelete = (): void => {\n        dispatch({\n            type: ACTIONS.DELETE_TODO,\n            payload: {\n                id: todo.id\n            }\n        });\n    }\n\n    return (\n        <tr className={ `todo-row ${(todo.completed && \"completed\")}` }>\n            <td>{todo.name}</td>\n            <td className=\"flex row center\">\n                <Counter value={todo.priority}\n                    minValue={MIN_PRIORITY}\n                    maxValue={MAX_PRIORITY}\n                    onChange={handlePriorityChange}\n                    increaseLabel={ capitalize(dictionary.tooltips.increasePriority) }\n                    decreaseLabel={ capitalize(dictionary.tooltips.decreasePriority) }\n                />\n            </td>\n            <td>\n                <div className=\"flex row center\">\n                    <div className=\"toolbar-item-container\">\n                        <button\n                            className=\"toolbar-element icon\"\n                            onClick={handleToggleTodo}\n                            title={capitalize(dictionary.tooltips.toggleCompletionState)}\n                        >\n                            <FontAwesomeIcon icon={todo.completed ? \"check-square\": \"square\" }/>\n                        </button>\n                    </div>\n                </div>\n            </td>\n            <td>\n                <div className=\"flex row center\">\n                    <div className=\"toolbar-item-container\">\n                        <button\n                            className=\"toolbar-element icon\"\n                            title={capitalize(dictionary.tooltips.deleteTodo) }\n                            onClick={handleDelete}\n                        >\n                            <FontAwesomeIcon icon=\"trash-alt\"/>\n                        </button>\n                    </div>\n                </div>\n            </td>\n            \n        </tr>\n    );\n};\n\n\nexport { TodoRow };\n","import { IDictionary } from \"./dictionary/IDictionary\";\n\nexport type FileReadyHandler = (this: FileReader, ev: ProgressEvent<FileReader>) => any;\n\nexport const readTextFile = (file: File, readyHandler: FileReadyHandler) => {\n  let fr = new FileReader();\n  fr.addEventListener('loadend', readyHandler);\n  fr.readAsText(file)\n}\n\nexport const getTodoFileHeaders = (dictionary: IDictionary) => {\n  return [\n    {\n      label: dictionary.terms.id,\n      key: 'id'\n    },\n    {\n      label: dictionary.terms.todo,\n      key: \"name\"\n    },\n    {\n      label: dictionary.terms.completed,\n      key: \"completed\",\n    },\n    {\n      label: dictionary.terms.priority,\n      key: \"priority\"\n    }\n  ];\n}\n","import React, { useContext } from 'react';\nimport { CSVLink } from 'react-csv';\nimport { TodoContext } from '../../../context/TodoContext';\nimport { getTodoFileHeaders } from '../../../helpers/file-utils';\nimport { capitalize } from '../../../helpers/string-helpers';\nimport { TodoFileExportInterfaceProps } from '../TodoFileExport';\n\nexport const TodoFileExportCsv = ({ data, title }: TodoFileExportInterfaceProps) => {\n\n  const context = useContext(TodoContext)\n  const dictionary = context.dictionary;\n\n  return (\n    <button className=\"toolbar-element\" title={`${ capitalize(dictionary.tooltips.downloadTodosAs)} CSV`}>\n      <CSVLink data={data} headers={getTodoFileHeaders(dictionary)} filename={`${title}.csv`}>\n        .csv\n      </CSVLink>\n    </button>\n  );\n};\n","import React, { useContext } from 'react';\nimport { TodoContext } from '../../../context/TodoContext';\nimport { capitalize } from '../../../helpers/string-helpers';\nimport { TodoFileExportInterfaceProps } from '../TodoFileExport';\n\nconst generateDownloadLink = (title: string, data: any[]) => {\n  return `data:text/json;charset=utf-8,${encodeURIComponent(\n    JSON.stringify({ title, data }, null, 2))}\n  `;\n};\n\nexport const TodoFileExportJson = ({ data, title }: TodoFileExportInterfaceProps) => {\n  \n  const context = useContext(TodoContext);\n  const dictionary = context.dictionary;\n  \n  return (\n    <button\n      className=\"toolbar-element\"\n      title={`${capitalize(dictionary.tooltips.downloadTodosAs)} JSON`}>\n      <a\n        href={ generateDownloadLink(title, data)}\n        download={`${title}.json`}\n      >.json</a>\n    </button>\n  );\n};\n","import React, { useContext } from 'react';\nimport { TodoContext } from '../../../context/TodoContext';\nimport { getTodoFileHeaders } from '../../../helpers/file-utils';\nimport { capitalize } from '../../../helpers/string-helpers';\nimport { Todo } from '../../../interfaces/Todo';\nimport { TodoFileExportInterfaceProps } from '../TodoFileExport';\n\n\nexport const TodoFileExportTxt = ({ data, title }: TodoFileExportInterfaceProps) => {\n  \n  const context = useContext(TodoContext);\n  const dictionary = context.dictionary;\n  \n  const dataToTxt = (data: Todo[]) => {\n\n    let fileContent = getTodoFileHeaders(dictionary).map(header => header.label).join('\\t');\n\n    data.forEach((todo: Todo) => {\n      fileContent = `${ fileContent }\\n${ Object.values(todo).join('\\t') }`;\n    });\n\n    return fileContent;\n  };\n\n  const generateDownloadLink = (title: string, data: any[]) => {\n    return `data:text/plain;charset=utf-8,${encodeURIComponent(dataToTxt(data))}`;\n  };\n\n  return (\n    <button\n      className=\"toolbar-element\"\n      title={`${capitalize(dictionary.tooltips.downloadTodosAs)} TXT`}>\n      <a\n        href={ generateDownloadLink(title, data)}\n        download={`${title}.txt`}\n      >.txt</a>\n    </button>\n  );\n};\n","import React, { ReactElement } from 'react';\nimport { capitalize } from '../../../helpers/string-helpers';\nimport { TodoFileExport } from '../../export/TodoFileExport';\nimport { ToolbarElement } from './ToolbarElement';\n\ntype ToolbarProps = {\n  children: (\n    // TODO: Implement inheritance or abstraction: TodoFileExport > ToolbarElement\n    ReactElement<typeof TodoFileExport> | Array<ReactElement<typeof TodoFileExport>> |\n    ReactElement<typeof ToolbarElement> | Array<ReactElement<typeof ToolbarElement>>\n  ),\n  label: string,\n  collapsed?: boolean,\n  clickLabelHandler: () => void\n};\n\nconst Toolbar = ({ children, label, collapsed, clickLabelHandler }: ToolbarProps) => {\n\n  return (\n    <div className=\"toolbar\">\n      <div className=\"label pointer\" onClick={ clickLabelHandler }>\n        {capitalize(label)}\n      </div>\n    \n      <div className={`toolbar-item-container ${collapsed && 'collapsed'}`}>\n        {children}\n      </div>\n    </div>\n  );\n}\n\n\nexport { Toolbar, ToolbarElement };","import React, { useContext } from 'react';\nimport { useState } from \"react\";\nimport { ACTIONS } from '../../../config/todo-actions';\nimport { TodoContext } from '../../../context/TodoContext';\nimport { IDictionary } from '../../../helpers/dictionary/IDictionary';\nimport { Action } from '../../../interfaces/Action';\nimport { Todo } from '../../../interfaces/Todo';\nimport { Formats, TodoFileExport } from '../../export/TodoFileExport';\nimport { Toolbar } from './Toolbar';\nimport { ToolbarElement } from \"./ToolbarElement\";\n\ntype ToolbarContainerProps = {\n    onOpenFileModal: () => void\n}\n\nexport const TodoActionsMenu = ({ onOpenFileModal }: ToolbarContainerProps) => {\n\n    const context = useContext(TodoContext)\n\n    const dispatch: React.Dispatch<Action> = context.dispatch;\n    const filename = context.todoListKey;\n    const data: Todo[] = context.todos;\n    const dictionary: IDictionary = context.dictionary;\n\n    const [activeItem, setActiveItem] = useState(1);\n\n    const sortAlphaAsc = () => {\n        dispatch({ type: ACTIONS.SORT_ALPHA_ASC, payload: {} });\n    };\n\n    const sortAlphaDesc = () => {\n        dispatch({ type: ACTIONS.SORT_ALPHA_DESC, payload: {} });\n    };\n\n    const sortPriorityAsc = (): void => {\n        dispatch({ type: ACTIONS.SORT_PRIORITY_ASC, payload: {} });\n    };\n\n    const sortPriorityDesc = (): void => {\n        dispatch({ type: ACTIONS.SORT_PRIORITY_DESC, payload: {} });\n    };\n\n    const sortCompletedFirst = (): void => {\n        dispatch({ type: ACTIONS.SORT_COMPLETED_FIRST, payload: {} });\n    };\n\n    const sortPendingFirst = (): void => {\n        dispatch({ type: ACTIONS.SORT_PENDING_FIRST, payload: {} });\n    };\n\n    const markAllAsCompleted = (): void => {\n        dispatch({ type: ACTIONS.MARK_ALL_AS_COMPLETED, payload: {} });\n    };\n\n    const markAllAsPending = (): void => {\n        dispatch({ type: ACTIONS.MARK_ALL_AS_PENDING, payload: {} });\n    };\n\n    const toggleAll = (): void => {\n        dispatch({ type: ACTIONS.TOGGLE_ALL, payload: {} });\n    }\n\n    const deleteAllCompleted = (): void => {\n        dispatch({ type: ACTIONS.DELETE_ALL_COMPLETED, payload: {} });\n    };\n\n    const deleteAllPending = (): void => {\n        dispatch({ type: ACTIONS.DELETE_ALL_PENDING, payload: {} });\n    };\n\n    const openFileImportModal = (): void => {\n        onOpenFileModal();\n    }\n\n    return (\n        <div className=\"toolbar-container\">\n            <div className=\"panel flex row justify-start wrap\">\n                <Toolbar label={ dictionary.terms.toSort} collapsed={activeItem !== 1} clickLabelHandler={() => { setActiveItem(1) }}>\n                    <ToolbarElement\n                        title={`${ dictionary.tooltips.alphaSort } (${dictionary.terms.ascendent})`}\n                        handler={sortAlphaAsc}\n                        icon=\"sort-alpha-up-alt\"\n                    />\n                    <ToolbarElement\n                        title={`${ dictionary.tooltips.alphaSort } (${dictionary.terms.descendent})`}\n                        handler={sortAlphaDesc}\n                        icon=\"sort-alpha-down-alt\"\n                    />\n                    <ToolbarElement\n                        title={`${ dictionary.tooltips.prioritySort} (${dictionary.terms.descendent})`}\n                        handler={sortPriorityAsc}\n                        icon=\"sort-numeric-up-alt\"\n                    />\n                    <ToolbarElement\n                        title={`${ dictionary.tooltips.prioritySort} (${dictionary.terms.descendent})`}\n                        handler={sortPriorityDesc}\n                        icon=\"sort-numeric-down-alt\"\n                    />\n                    <ToolbarElement\n                        title={`${ dictionary.tooltips.showCompletedFirst}`}\n                        handler={sortCompletedFirst}\n                        icon=\"check-circle\"\n                    />\n                    <ToolbarElement\n                        title={`${ dictionary.tooltips.showPendingFirst}`}\n                        handler={sortPendingFirst}\n                        icon=\"circle\"\n                    />\n                </Toolbar>\n                \n                <Toolbar label={ dictionary.terms.completionState} collapsed={activeItem !== 2} clickLabelHandler={() => { setActiveItem(2) }} >\n                    <ToolbarElement\n                        title={ dictionary.tooltips.markAllAsCompleted }\n                        handler={markAllAsCompleted}\n                        icon=\"calendar-check\"\n                    />\n                    <ToolbarElement\n                        title={ dictionary.tooltips.markAllAsPending }\n                        handler={markAllAsPending}\n                        icon=\"calendar\"\n                    />\n                    <ToolbarElement\n                        title={ dictionary.tooltips.toggleCompletionState }\n                        handler={toggleAll}\n                        icon=\"exchange-alt\"\n                    />\n                </Toolbar>\n                \n                <Toolbar label={ dictionary.terms.deletion } collapsed={activeItem !== 3} clickLabelHandler={() => { setActiveItem(3) }}>\n                    <ToolbarElement\n                        title={ dictionary.tooltips.deleteCompletedTodos}\n                        handler={deleteAllCompleted}\n                        icon=\"calendar-check\"\n                    />\n                    <ToolbarElement\n                        title={ dictionary.tooltips.deletePendingTodos}\n                        handler={deleteAllPending}\n                        icon=\"calendar\"\n                    />\n                </Toolbar>\n                \n                <Toolbar label={ dictionary.terms.export } collapsed={activeItem !== 4} clickLabelHandler={() => { setActiveItem(4) }}>\n                    <TodoFileExport title={filename} data={data} format={Formats.CSV} />\n                    <TodoFileExport title={filename} data={data} format={Formats.JSON} />\n                    <TodoFileExport title={filename} data={data} format={Formats.TEXT} />\n                </Toolbar>\n                \n                <Toolbar label={ dictionary.terms.import} collapsed={activeItem !== 5} clickLabelHandler={() => { setActiveItem(5) }}>\n                    <ToolbarElement\n                        title={ dictionary.tooltips.importTodosFromFile }\n                        handler={openFileImportModal}\n                        icon=\"file\"\n                    />\n                </Toolbar>\n            </div>\n        </div>\n    )\n}\n","import { Todo } from \"../interfaces/Todo\";\n\n/**\n * Given a todo list, gets the number of completed todos.\n * \n * @param data \n */\nexport const getNumberOfCompletedTodos = (data: Todo[]): number => {\n  return data.reduce((nCompleted, t) => (\n    nCompleted + (t.completed ? 1 : 0)\n  ), 0);\n}\n\n/**\n * Gets the average value of priority for a given todo list.\n * \n * If list is empty, it returns 0.\n * \n * @param data The todo list. \n */\nexport const getAveragePriority = (data: Todo[]): number => {\n  const prioritySum = getPrioritySum(data);\n  return data.length > 0 ? prioritySum / data.length : 0; \n}\n\n/**\n * Gets the priority sum value for a given todo list.\n * \n * If list is empty, it returns 0.\n * @param data The todo list. \n */\nexport const getPrioritySum = (data: Todo[]): number => {\n  return data.reduce((sum, { priority }) => sum + priority, 0);\n}\n\n","import React, { ReactNode, useContext } from 'react';\nimport { TodoContext } from '../../context/TodoContext';\nimport { IDictionary } from '../../helpers/dictionary/IDictionary';\nimport { capitalize } from '../../helpers/string-helpers';\n\ntype DialogProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  children: ReactNode | Array<ReactNode>;\n};\nexport const Dialog = ({ isOpen, onClose, children }: DialogProps) => {\n\n  const context = useContext(TodoContext);\n  const dictionary: IDictionary = context.dictionary;\n\n  return (\n  <>\n    {isOpen && (\n      <div className=\"dialog--overlay\">\n        <div className=\"dialog\">\n          <div className=\"panel\">\n            {children}\n            <hr/>\n            <button onClick={onClose}>{ capitalize(dictionary.terms.exit) }</button>\n          </div>\n        </div>\n      </div>\n    )}\n  </>\n  );\n};\n","import React, { ChangeEvent, useContext } from 'react';\nimport { TodoContext } from '../../context/TodoContext';\nimport { IDictionary } from '../../helpers/dictionary/IDictionary';\nimport { readTextFile } from '../../helpers/file-utils';\nimport { Todo } from '../../interfaces/Todo';\n\n// De momento la importación de tareas soporta solamente formato JSON pero se platea\n// dar soporte a otros formatos de ficheros.\n\ntype TodoFileImportProps = {\n  onSelectFile: (data: Todo[]) => void,\n  onLoadDataError: (errorMessage: string) => void\n}\n\nexport const TodoFileImport = ({ onSelectFile, onLoadDataError }: TodoFileImportProps) => {\n\n  const context = useContext(TodoContext);\n  const dictionary: IDictionary = context.dictionary;\n\n  const changeHandler = (ev: ChangeEvent<HTMLInputElement>) => {\n    const files = ev.target.files;\n    if (!files) {\n      onLoadDataError(dictionary.issues.noRecognisedFile);\n      return;\n    }\n    const file = files[0];\n\n    readTextFile(file, function(this: FileReader, ev: ProgressEvent<FileReader>): void {\n      if (!this.result) {\n        onLoadDataError(dictionary.issues.cannotReadFileContents)\n        return;\n      }\n      try {\n        const content = JSON.parse(this.result.toString());\n        const data: Todo[] = content.data;\n        onSelectFile(data);\n      } catch (error) {\n        onLoadDataError(error);\n      } \n    });\n  };\n\n  return (\n    <div className=\"form-group\">\n      <label className=\"button pointer\" htmlFor=\"import-file\">\n        { dictionary.tooltips.importTodosFrom } JSON \n      </label>\n      <input\n        id=\"import-file\"\n        className=\"input-file\"\n        type=\"file\"\n        accept=\".json\"\n        onChange={changeHandler} />\n    </div>\n  )\n\n};","import React, { FormEvent, useContext, useState } from 'react';\n\nimport { TodoRow } from './TodoRow';\n\nimport { ACTIONS } from '../../config/todo-actions'\nimport { Todo } from '../../interfaces/Todo';\nimport { Action } from '../../interfaces/Action';\nimport { TodoActionsMenu } from '../layout/toolbar/TodoActionsMenu';\nimport { getAveragePriority, getNumberOfCompletedTodos } from '../../helpers/data-summary';\nimport { Dialog } from '../content/Dialog';\nimport { TodoFileImport } from '../import/TodoFileImport';\nimport { IDictionary } from '../../helpers/dictionary/IDictionary';\nimport { TodoContext } from '../../context/TodoContext';\nimport { capitalize, sanitize } from '../../helpers/string-helpers';\n\nconst NEW_TODO_INPUT_SIZE = 60;\n\nconst TodoManager = () => {\n\n    const [name, setName] = useState('');\n    const [ fileModalActive, setFileModalActive] = useState(false);\n\n    const context = useContext(TodoContext);\n    const data: Todo[] = context.todos;\n    const dispatch: React.Dispatch<Action> = context.dispatch;\n    const filename = context.todoListKey;\n    const dictionary: IDictionary = context.dictionary;\n\n    const handleSubmit = (event: FormEvent) => {\n        event.preventDefault();\n        const sanitizedName = sanitize(name);\n        dispatch({ type: ACTIONS.ADD_TODO, payload: { name: sanitizedName } });\n        setName('');\n    };\n\n    const handleImportTodosFromExternalSource = (data: Todo[]): void => {\n        const payload = { data };\n        dispatch({ type: ACTIONS.IMPORT_TODOS, payload });\n        setFileModalActive(false);\n    }\n\n\n    return (\n        <div className=\"todo-list\">\n            <div className=\"panel\">\n                <h2 className=\"align-center\">{ capitalize(dictionary.terms.todoList) }: {filename}</h2>\n            </div>\n            <TodoActionsMenu onOpenFileModal={ () => setFileModalActive(true) }/>\n            <table>\n                <thead>\n                    <tr>\n                        <th>{ capitalize(dictionary.terms.todo) }</th>\n                        <th>{ capitalize(dictionary.terms.priority) }</th>\n                        <th>{ capitalize(dictionary.terms.completionState) }</th>\n                        <th>{ capitalize(dictionary.terms.actions) }</th>\n                    </tr>\n                </thead>\n                <tfoot>\n                    <tr className=\"align-center\">\n                        <td></td>\n                        <td>{ capitalize(dictionary.terms.averagePriority) }: { getAveragePriority(data).toFixed(3) }</td>\n                        <td>{ getNumberOfCompletedTodos(data) }/{data.length}</td>\n                        <td></td>\n                    </tr>\n                </tfoot>\n                <tbody>\n                    {\n                        (data.length > 0) ? (\n                            data.map((todo) => (\n                                <TodoRow key={ todo.id } todo={todo} dispatch={ dispatch }/>\n                            ))     \n                        ) : <tr><td colSpan={4} className=\"align-center\">{dictionary.issues.noTodosOnList}</td></tr>\n                    }\n                </tbody>\n            </table>\n            <div className=\"panel\">\n                <form onSubmit={ handleSubmit }>\n                    <div className=\"flex row start\">\n                        <div className=\"form-group\">\n                            <label className=\"label\">{ capitalize(dictionary.terms.create) }</label>\n                            <input type=\"text\"\n                                value={name}\n                                maxLength={NEW_TODO_INPUT_SIZE}\n                                size={NEW_TODO_INPUT_SIZE}\n                                onChange={e => setName(e.target.value)}\n                            />\n                            <button type=\"submit\" disabled={!name.trim()}>\n                                {dictionary.labels.addTodo}\n                            </button>\n                        </div>    \n                    </div>\n                </form>\n            </div>\n\n            <Dialog\n                isOpen={fileModalActive}\n                onClose={ () => setFileModalActive(false) }\n            >\n                <h2>{ dictionary.tooltips.importTodosFromFile}</h2>\n                <p>{ dictionary.descriptions.importTodosFromFile }</p>\n                <TodoFileImport\n                    onSelectFile={ handleImportTodosFromExternalSource }\n                    onLoadDataError={ alert }\n                />\n            </Dialog>\n\n        </div>\n    )\n};\n\nexport { TodoManager };","import React, { useContext, useState } from \"react\";\nimport { TodoContext } from \"../../context/TodoContext\";\nimport { IDictionary } from \"../../helpers/dictionary/IDictionary\";\n\nconst ZoneWidget = () => {\n  \n  const [date, setDate] = useState<Date>(new Date());\n  \n  const context = useContext(TodoContext);\n  const dictionary: IDictionary = context.dictionary;\n  \n\n  const getGreeting = (date: Date) => {\n    let h = date.getHours();\n    let _greeting;\n    if (h > 6 && h < 12) {\n      _greeting = dictionary.greetings.goodMorning;\n    } else if (h >= 12 && h < 17) {\n      _greeting = dictionary.greetings.goodAfternoon;\n    } else if (h >= 17 && h < 20) {\n      _greeting = dictionary.greetings.goodEvening;\n    } else {\n      _greeting = dictionary.greetings.goodNight;\n    }\n    return _greeting;\n  }\n\n\n  setInterval(() => {\n    setDate(new Date());\n  }, 1000);\n\n  return (\n    <div className=\"panel\">\n      <h2 className=\"align-center\">{`${getGreeting(date)} - ${new Date().toLocaleString('es-ES')}`}</h2>\n    </div>\n  );\n\n}\n\nexport {ZoneWidget};","import { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab as brands } from '@fortawesome/free-brands-svg-icons'\nimport { faCalendar, faCalendarCheck, faCalendarTimes, faCheckCircle, faCheckSquare, faCircle, faCoffee, faExchangeAlt, faEye, faEyeSlash, faFile, faList, faMinusSquare, faPlusSquare, faSortAlphaDownAlt, faSortAlphaUpAlt, faSortNumericDownAlt, faSortNumericUpAlt, faSquare, faTools, faTrash, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(brands, faCheckSquare, faCoffee, faSquare, faTrash, faTrashAlt, faMinusSquare, faPlusSquare, faSortAlphaUpAlt, faSortAlphaDownAlt, faSortNumericUpAlt, faSortNumericDownAlt, faCheckCircle, faCircle, faCalendarCheck, faCalendarTimes, faCalendar, faCalendar, faExchangeAlt, faEye, faEyeSlash, faFile, faList, faTools)","import React, { ReactNode, ReactNodeArray, useState } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\ntype ItemProps = { children: ReactNode | ReactNodeArray }\n\n// Esta clase es para probar cosas.\n\nconst Item = ({ children }: ItemProps) => {\n\n  const [isVisible, setIsVisible] = useState(false);\n\n  return (\n    <div className=\"panel\">\n      <CSSTransition in={isVisible} timeout={300} classNames={\"sample\"}>\n        <span>{children}</span>\n      </CSSTransition>\n      <button onClick={() => setIsVisible(!isVisible)}>\n        { isVisible ? \"Hide\" : \"Show\"}\n      </button>\n    </div>\n  )\n};\n\nexport const Sandbox = () => {\n\n  return (\n       false ? (\n      <>\n        <h3>Items</h3>\n        <div>\n          <Item>Item 1</Item>\n          <Item>Item 2</Item>\n          <Item>Item 3</Item>\n        </div>\n      </>\n    ) : <>\n      </>\n  )\n};","import React, { ChangeEvent, FormEvent, useContext, useState } from 'react';\nimport { TodoContext } from '../../context/TodoContext';\nimport { IDictionary } from '../../helpers/dictionary/IDictionary';\nimport { capitalize, sanitize } from '../../helpers/string-helpers';\nimport { getCustomStorageKeys } from '../../services/storage/index';\nimport { Dialog } from '../content/Dialog';\n\ntype CustomTodoListDialogProps = {\n  active: boolean;\n  onCreateTodoList: (key: string) => void;\n  onSelectTodoList: (selected: string) => void;\n  onClose: () => void;\n}\n\nexport const CustomTodoListDialog = ({ active, onCreateTodoList, onSelectTodoList, onClose }: CustomTodoListDialogProps) => {\n \n  const context = useContext(TodoContext);\n\n  const [newKey, setNewKey] = useState('');\n  const dictionary: IDictionary = context.dictionary;\n\n  const submitNewTodoListHandler = (ev: FormEvent) => {\n    ev.preventDefault();\n    onCreateTodoList(sanitize(newKey));\n    onClose();\n    setNewKey('');\n  };\n\n  const selectTodoListHandler = (ev: ChangeEvent<HTMLSelectElement>): void => {\n    onSelectTodoList(ev.target.value);\n    onClose();\n  };\n\n  return (\n    <Dialog isOpen={ active } onClose={ onClose }>\n      <h2>{ dictionary.menu.customTodoLists }</h2>\n      <div className=\"form-group\">\n        <label className=\"label\">\n          { dictionary.labels.loadTodoList }\n          </label>\n        <select onChange={ selectTodoListHandler } value=''>\n          <option disabled value=''>---{ dictionary.tooltips.selectTodoList }---</option>\n          {\n            getCustomStorageKeys().map((TodoListKey, index) => <option key={index}>{ TodoListKey }</option>)\n          }\n        </select>\n      </div>\n      <form onSubmit={ submitNewTodoListHandler }>\n        <div className=\"form-group\">\n          <label className=\"label\">\n            { dictionary.labels.createNewTodoList }\n          </label>\n          <input type=\"text\" name=\"todo-list\" value={newKey} onChange={ (ev) => { setNewKey(ev.target.value) }}/>\n          <button className=\"button\" disabled={ !newKey.trim() }>{ capitalize(dictionary.terms.create) }</button>\n        </div>\n      </form>\n    </Dialog>\n  )\n}","import React, { ChangeEvent } from 'react';\nimport { dateToIsoString } from '../../helpers/date-helpers';\n\ntype DateSelectorProps = {\n  value?: Date,\n  label: string,\n  onChange: (date: Date) => void\n}\n\nexport const DateSelector = ({ value, label, onChange }: DateSelectorProps) => {\n\n  const handler = (ev: ChangeEvent<HTMLInputElement>) => {\n    const date = ev.target.valueAsDate;\n    const isValid = ev.target.willValidate;\n    if (isValid && date != null) {\n      onChange(date);\n    }\n  }\n\n  return (\n    <div className=\"form-group\">\n      <label className=\"label\">{ label }</label>\n      <input type=\"date\" name=\"date\" value={ dateToIsoString(value) } min=\"2020-01-01\" max=\"2099-12-31\" onChange={ (ev) => handler(ev) } />\n    </div>\n  );\n}","import React, { useContext } from 'react';\nimport { TodoContext } from '../../context/TodoContext';\nimport { IDictionary } from '../../helpers/dictionary/IDictionary';\nimport { capitalize } from '../../helpers/string-helpers';\nimport { Dialog } from '../content/Dialog';\nimport { DateSelector } from '../selectors/DateSelector';\n\ntype DateTodoListDialogProps = {\n  active: boolean;\n  onSelectDate: (date: Date) => void;\n  onClose: () => void;\n};\n\nexport const DateTodoListDialog = ({ active, onSelectDate, onClose }: DateTodoListDialogProps) => {\n\n  const context = useContext(TodoContext)\n  const dictionary: IDictionary = context.dictionary;\n\n  const selectDateHandler = (date: Date) => {\n    onSelectDate(date);\n    onClose();\n  };\n\n  return (\n    <Dialog isOpen={ active } onClose={ onClose }>\n      <h2>{dictionary.menu.dailyTodoLists}</h2>\n      <p>{dictionary.descriptions.dailyTodoLists}</p>\n      <DateSelector label={ capitalize(dictionary.terms.date) } onChange={ selectDateHandler } />\n    </Dialog>\n  );\n}","import React, { useContext } from 'react';\nimport { ACTIONS } from '../../config/settings-actions';\nimport { TodoContext } from '../../context/TodoContext';\nimport { Language } from '../../helpers/dictionary';\nimport { IDictionary } from '../../helpers/dictionary/IDictionary';\nimport { capitalize } from '../../helpers/string-helpers';\nimport { Settings } from '../../interfaces/Settings';\n\nexport const SettingsManager = () => {\n\n  const context = useContext(TodoContext)\n  const settings: Settings = context.settings\n  const settingsDispatcher = context.settingsDispatcher;\n  const dictionary: IDictionary = context.dictionary;\n\n  const changeLanguageHandler = (language: Language) => {\n    const payload = { language };\n    settingsDispatcher({ type: ACTIONS.SET_LANGUAGE, payload});\n  }\n\n  return (\n    <div className=\"settings-manager\">\n      \n      <div className=\"form-group\">\n        <label className=\"label\" title={ dictionary.descriptions.languageSettings}>\n          { capitalize(dictionary.labels.interfaceLanguage) }\n        </label>\n        <select onChange={(ev) => changeLanguageHandler(ev.target.value as Language) }>\n          <option value=\"es\" selected={ settings.language === 'es' }>{dictionary.languages.es }</option>\n          <option value=\"ca\" selected={ settings.language === 'ca' }>{dictionary.languages.ca }</option>\n          <option value=\"en\" selected={ settings.language === 'en' }>{dictionary.languages.en }</option>\n        </select>\n      </div>\n\n    </div>\n  )\n\n\n}","import React, { useContext } from \"react\";\nimport { TodoContext } from \"../../context/TodoContext\"\nimport { capitalize } from \"../../helpers/string-helpers\";\nimport { Dialog } from \"../content/Dialog\";\nimport { SettingsManager } from \"../settings/SettingsManager\";\n\ntype SettingsManagerDialogProps = {\n  active: boolean;\n  onClose: () => void;\n} \n\nexport const SettingsManagerDialog = ({ active, onClose }: SettingsManagerDialogProps ) => {\n\n  const context = useContext(TodoContext);\n  const dictionary = context.dictionary;\n\n  return (\n    <Dialog isOpen={active} onClose={onClose}>\n      <h2>{ capitalize(dictionary.menu.configureSettings ) }</h2>\n      <SettingsManager/>\n    </Dialog>\n  )\n\n}","import React, { useContext, useState } from 'react';\nimport { Toolbar, ToolbarElement } from './Toolbar';\nimport { Action } from '../../../interfaces/Action';\n\nimport { dateToIsoString } from '../../../helpers/date-helpers';\nimport { ACTIONS } from '../../../config/todo-actions';\nimport { CustomTodoListDialog } from '../../dialogs/CustomTodoListDialog';\nimport { DateTodoListDialog } from '../../dialogs/DateTodoListDialog';\nimport { TodoContext } from '../../../context/TodoContext';\nimport { IDictionary } from '../../../helpers/dictionary/IDictionary';\nimport { SettingsManagerDialog } from '../../dialogs/SettingsManagerDialog';\n\nexport const MainMenu = () => {\n\n  const [dateSelectorActive, setDateSelectorActive] = useState(false);\n  const [todoListSelectorActive, setTodoListSelectorActive] = useState(false);\n  const [settingsActive, setSettingsActive] = useState(false);\n\n  const context = useContext(TodoContext);\n\n  const dispatch: React.Dispatch<Action> = context.dispatch;\n  const setKey = context.setKey;\n  const dictionary: IDictionary = context.dictionary;\n\n  const [activeItem, setActiveItem] = useState(1);\n\n  const selectTodoListHandler = (todoList: string) => {\n    const payload = { key: todoList };\n    dispatch({ type: ACTIONS.GET_TODO_LIST_FROM_CUSTOM_KEY, payload });\n    setKey(todoList);\n  }\n\n  const selectDateHandler = (date: Date): void =>  {\n    const key = dateToIsoString(date)\n    const payload = { key };\n    dispatch({ type: ACTIONS.GET_TODO_LIST_FROM_KEY_DATE, payload });\n    setKey(key);\n    setDateSelectorActive(false);\n  }\n\n  // TODO: Cambiar la terminología de la Toolbar para hacer contenedores con nombres apropiados\n  return (\n    <>\n      <div className=\"toolbar-container\">\n        <div className=\"panel flex row justify-start wrap\">\n          <Toolbar label={ dictionary.terms.todos } clickLabelHandler={() => { setActiveItem(1)}} collapsed={ activeItem !== 1}>\n            <ToolbarElement\n              title={ dictionary.menu.dailyTodoLists}\n              handler={() => { setDateSelectorActive(true); }}\n              icon=\"calendar\" />\n            <ToolbarElement\n              title={ dictionary.menu.customTodoLists }\n              handler={() => { setTodoListSelectorActive(true); }}\n              icon=\"list\" />\n          </Toolbar>\n          <Toolbar label={ dictionary.terms.settings } clickLabelHandler={() => { setActiveItem(2)}} collapsed={ activeItem !== 2}>\n            <ToolbarElement\n              title={ dictionary.menu.configureSettings }\n              handler={() => { setSettingsActive(true); }}\n              icon=\"tools\" />\n          </Toolbar>   \n        </div>\n      </div>\n\n      <DateTodoListDialog\n        active={ dateSelectorActive }\n        onSelectDate={ selectDateHandler }\n        onClose={ () => setDateSelectorActive(false) }\n      />\n      \n      <CustomTodoListDialog\n        active={todoListSelectorActive}\n        onSelectTodoList={selectTodoListHandler}\n        onCreateTodoList={selectTodoListHandler}\n        onClose={ () => setTodoListSelectorActive(false) }\n      />\n\n      <SettingsManagerDialog\n        active={settingsActive}\n        onClose={ () => setSettingsActive(false) }\n      />\n\n    </>\n  );\n};\n","import React from 'react';\nimport { TodoManager } from './components/todo/TodoManager';\nimport { ZoneWidget } from './components/widgets/ZoneWidget';\nimport './helpers/icon-library';\nimport { Sandbox } from './components/Sandbox';\nimport { MainMenu } from './components/layout/toolbar/MainMenu';\nimport { TodoContextProvider } from './context/TodoContext';\n\nconst App = () => {\n\n  return (\n    <div className=\"App\">\n      <TodoContextProvider>\n        <ZoneWidget />\n        <MainMenu  />\n          <TodoManager />\n        <Sandbox/>\n      </TodoContextProvider>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}